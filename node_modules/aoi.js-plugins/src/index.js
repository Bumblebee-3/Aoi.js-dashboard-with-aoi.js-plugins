
const crypto = require('crypto')

const DiscordOauth2 = require("discord-oauth2");

// outpout: [ 'SEND_MESSAGES', 2048n ]
class Dash {
  constructor(name) {
    let bot = name.bot;

    let clientid = name.clientID;
    let secret = name.clientSecret;
    let redirectUri= name.redirectURI;

    
    this.bot=bot;
    this.id=clientid;
    this.sc=secret;
    this.rd=redirectUri;
    const oauth = new DiscordOauth2({
      clientId: clientid,
      clientSecret: secret,
      redirectUri: redirectUri 
    });
    this.oauth=oauth;
    console.log(oauth)

  }
generateUrl() {
  let oauth=this.oauth;
  const url = oauth.generateAuthUrl({
    scope: ["identify", "guilds"],
    state: crypto.randomBytes(16).toString("hex")
  });
  
  return(url);

  }
async getAccessToken(code) {
  let oauth=this.oauth;

  let tuff = await oauth.tokenRequest({
  code,
	scope: "identify guilds",
	grantType: "authorization_code"
  })
  
  return(tuff.access_token);
}
async getUser(access_token) {
  let a =access_token;
  let oauth=this.oauth;
  let v = oauth.getUser(a);
  return(v);

}
async getGuilds(access_token) {
  let a =access_token;
  let oauth=this.oauth;
  let v = await oauth.getUserGuilds(a);
  return(v);

}
async getAdminGuilds(access_token) {
  
  let a =access_token;
  let oauth=this.oauth;
  let myObj = await oauth.getUserGuilds(a);
  var aa = [];
  /*
  for (let i = 0; i < myObj.length; i++) {
    
  }*/
  
  for (let [i, guild] of Object.entries(myObj)) {


    if ((guild.permissions & 0x8) !=0) {
      aa.push(guild.id)

    }

  };

  return(aa);
  


}
async getCommonAdminGuilds(access_token) {
  
  let a =access_token;
  let oauth=this.oauth;
  let myObj = await oauth.getUserGuilds(a);
  var ag = [];
  var bb=[];
  let bot = this.bot;
  
  for (let i = 0; i < bot.guilds.cache.size; i++) {
    bb.push(bot.guilds.cache.map(z=>z)[i].id)
  }

  for (let [i, guild] of Object.entries(myObj)) {

 
    if ((guild.permissions & 0x8) !=0 && bb.includes(guild.id)) {
      ag.push(guild.id)

    }

  };




  return(ag);
  


}

}


// Write your package code here.


function load_funcs(client){

//SAY COMMAND
client.functionManager.createCustomFunction({
name : '$say', //FUNCTION NAME 
params : ['text','author'],//THE TYPE OF PARAMS
type : 'aoi.js', //TYPE METHOD
code : ` 
{author} says: **{text}**
` //THE ACTUAL CODE IT WILL BE RETURN
})



// MEME COMMAND
client.functionManager.createCustomFunction({
name : '$meme', //FUNCTION NAME 
params : [],//THE TYPE OF PARAMS
type : 'aoi.js', //TYPE METHOD
code : `
$setVar[memetitle;$getObjectProperty[title]]
$setVar[memeurl;$getObjectProperty[url]]
$createObject[$httpRequest[https://meme-api.herokuapp.com/gimme]]
 `

 //THE ACTUAL CODE IT WILL BE RETURN
})
client.variables({
  memetitle:"",
  memeurl:"",

})
}
const path = require("path")
const fs = require('fs')


class Handler {
  constructor(data) {
    let bot = data.bot;
    let aoijs = data.aoijs;
    let variables = data.varfile||"none";
    let callbacks = data.callbackfile || "none";
    let commands = data.commandsfolder || "none";
    let status = data.statusfolder || "none";
    console.log(`════════ ≪ AOI.JS HANDLER READY! ≫ ════════`);

    const loader = new aoijs.LoadCommands(bot);
    
    //commands
    
    if(commands == "none"){
      console.log("Command folder was not provided!");
    }
    else {
      loader.load(bot.cmd,path.join(process.cwd(), commands));
      console.log(`════════ ≪ Loaded Commands ["${commands}"] ≫ ════════`);
    }

    //variables

    if(variables=="none"){
      console.log("Variables file was not provided!")
    }
    else{
      let vf = path.join(process.cwd(),variables);
      bot.variables(require(vf));
      console.log(`════════ ≪ Loaded Variables ["${variables}"] ≫ ════════`);
    
    }

    //callbacks

    if (callbacks=="none"){
      console.log("Callbacks file was not provided!");
    }
    else{
      let cf = path.join(process.cwd(),callbacks);
      require(cf)(bot);
      console.log(`════════ ≪ Loaded Callbacks ["${callbacks}"] ≫ ════════`);
    }

    //status 

    if(status=="none"){
      console.log("Status folder was not provided!");
    }
    else{
      let files = fs.readdirSync(path.join(process.cwd(),status)).filter(file => file.endsWith('js'))
      files.forEach( x => {
        bot.status({
          text:require(path.join(process.cwd(),`/status/${x}`)).text, // This sets the message status
          type:require(path.join(process.cwd(),`/status/${x}`)).type,
          time:require(path.join(process.cwd(),`/status/${x}`)).time
        });
      

      });
      console.log(`════════ ≪ Loaded Statuses ["${status}"] ≫ ════════`);
    }

    console.log(`════════ ≪ AOI.JS HANDLER LOADED! ≫ ════════`);
  }

}



module.exports ={
  load_funcs,
  Handler,
  Dash
}
